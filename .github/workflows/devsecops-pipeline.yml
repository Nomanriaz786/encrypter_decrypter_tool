name: DevSecOps CI/CD Pipeline

permissions:
  contents: read
  security-events: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  # Security Analysis Job
  security-scan:
    name: 'Security Analysis'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      # OWASP Dependency Check
      - name: Run OWASP Dependency Check (Backend)
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Secure Encryption Backend'
          path: './backend'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --nvdValidForHours 24
            --failOnCVSS 7

      - name: Save OWASP Backend Reports
        run: |
          # Ensure target directory exists and copy reports produced into it
          mkdir -p backend/reports
          if [ -d "reports" ]; then
            cp -r reports/* backend/reports/ || true
            rm -rf reports/* || true
          else
            echo "No reports directory present in workspace"
          fi

      - name: Run OWASP Dependency Check (Frontend)
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Secure Encryption Frontend'
          path: './frontend'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --nvdValidForHours 24
            --failOnCVSS 7

      - name: Save OWASP Frontend Reports
        run: |
          mkdir -p frontend/reports
          if [ -d "reports" ]; then
            cp -r reports/* frontend/reports/ || true
            rm -rf reports/* || true
          else
            echo "No reports directory present in workspace"
          fi

      # Upload OWASP reports
      - name: Upload OWASP Backend Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-backend-report
          path: backend/reports/

      - name: Upload OWASP Frontend Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-frontend-report
          path: frontend/reports/

  # Code Quality & Security Analysis
  sonar-analysis:
    name: 'SonarQube Analysis'
    runs-on: ubuntu-latest
    needs: security-scan
    env:
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      # Install dependencies
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      # SonarQube Scan
      - name: SonarQube Backend Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: backend/
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.qualitygate.wait=false
            -Dsonar.sources=src/
            -Dsonar.tests=src/__tests__/
            -Dsonar.test.inclusions=**/*.test.js,**/*.spec.js
            -Dsonar.exclusions=**/node_modules/**,**/*.config.js
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Frontend Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: frontend/
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.qualitygate.wait=false
            -Dsonar.sources=src/
            -Dsonar.tests=src/
            -Dsonar.test.inclusions=**/*.test.tsx,**/*.test.ts,**/*.spec.tsx,**/*.spec.ts
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/*.config.*
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}

  # SAST (Static Application Security Testing)
  sast-scan:
    name: 'SAST Security Scan'
    runs-on: ubuntu-latest
    needs: sonar-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Semgrep SAST Scan
      - name: Run Semgrep SAST Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/security-audit
          output: semgrep-report.json

      # Upload Semgrep results
      - name: Upload Semgrep Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-sast-report
          path: semgrep-report.json

  # Container Security Scan
  container-security:
    name: 'Container Security Scan'
    runs-on: ubuntu-latest
    needs: sast-scan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build Docker image for scanning
      - name: Build backend Docker image
        run: |
          cd backend
          docker build -t secure-encryption-backend:latest .

      # Trivy container scan
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: 'secure-encryption-backend:latest'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'
        continue-on-error: true

  # Security Policy Check
  security-policy:
    name: 'Security Policy Compliance'
    runs-on: ubuntu-latest
    needs: container-security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Check for security policy
      - name: Check Security Policy
        run: |
          if [ ! -f "SECURITY.md" ] && [ ! -f "docs/SECURITY.md" ]; then
            echo "❌ Security policy file not found"
            exit 1
          else
            echo "✅ Security policy file found"
          fi

      # Check for dependency files
      - name: Validate Dependencies
        run: |
          # Check if package.json files exist
          [ -f "backend/package.json" ] || (echo "❌ Backend package.json missing" && exit 1)
          [ -f "frontend/package.json" ] || (echo "❌ Frontend package.json missing" && exit 1)

          # Check for lock files
          [ -f "backend/package-lock.json" ] || (echo "❌ Backend package-lock.json missing" && exit 1)
          [ -f "frontend/package-lock.json" ] || (echo "❌ Frontend package-lock.json missing" && exit 1)

          echo "✅ Dependency files validated"

      # Check for environment configuration
      - name: Check Environment Configuration
        run: |
          if [ -f "backend/.env.example" ]; then
            echo "✅ Backend environment example found"
          else
            echo "⚠️  Backend .env.example not found"
          fi

          if [ -f "frontend/.env.example" ]; then
            echo "✅ Frontend environment example found"
          else
            echo "⚠️  Frontend .env.example not found"
          fi

  # Final Security Report
  security-report:
    name: 'Security Report Summary'
    runs-on: ubuntu-latest
    needs: [security-scan, sonar-analysis, sast-scan, container-security, security-policy]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Security Report
        run: |
          echo "# 🔒 DevSecOps Security Report" > security-report.md
          echo "" >> security-report.md
          echo "## 📊 Pipeline Results" >> security-report.md
          echo "" >> security-report.md

          # Check job statuses
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ OWASP Dependency Scan: PASSED" >> security-report.md
          else
            echo "❌ OWASP Dependency Scan: FAILED" >> security-report.md
          fi

          if [ "${{ needs.sonar-analysis.result }}" == "success" ]; then
            echo "✅ SonarQube Code Analysis: PASSED" >> security-report.md
          else
            echo "❌ SonarQube Code Analysis: FAILED" >> security-report.md
          fi

          if [ "${{ needs.sast-scan.result }}" == "success" ]; then
            echo "✅ SAST Security Scan: PASSED" >> security-report.md
          else
            echo "❌ SAST Security Scan: FAILED" >> security-report.md
          fi

          if [ "${{ needs.container-security.result }}" == "success" ] || [ "${{ needs.container-security.result }}" == "skipped" ]; then
            echo "✅ Container Security Scan: PASSED" >> security-report.md
          else
            echo "❌ Container Security Scan: FAILED" >> security-report.md
          fi

          if [ "${{ needs.security-policy.result }}" == "success" ]; then
            echo "✅ Security Policy Compliance: PASSED" >> security-report.md
          else
            echo "❌ Security Policy Compliance: FAILED" >> security-report.md
          fi

          echo "" >> security-report.md
          echo "## 🔍 Recommendations" >> security-report.md
          echo "" >> security-report.md
          echo "- Review OWASP dependency reports for vulnerable packages" >> security-report.md
          echo "- Address SonarQube code quality issues" >> security-report.md
          echo "- Fix SAST security findings" >> security-report.md
          echo "- Update container base images regularly" >> security-report.md
          echo "- Keep dependencies updated and audit regularly" >> security-report.md

          cat security-report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      # Fail the pipeline if critical security checks fail
      - name: Security Gate Check
        run: |
          if [ "${{ needs.security-scan.result }}" == "failure" ]; then
            echo "❌ Pipeline failed: OWASP Dependency Scan failed"
            exit 1
          fi

          if [ "${{ needs.sast-scan.result }}" == "failure" ]; then
            echo "❌ Pipeline failed: SAST Security Scan failed"
            exit 1
          fi

          echo "✅ All critical security checks passed"